using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;

namespace ChannelsPresentation
{
    public class AsyncAwaitExample
    {
        public async Task Run()
        {
            Console.WriteLine("=== Async/Await - –û—Å–Ω–æ–≤—ã –∏ –≤–∞–∂–Ω–æ—Å—Ç—å ===\n");

            await DemoBasicAsyncAwait();
            await DemoSequentialVsParallel();
            await DemoErrorHandling();
            ShowImportance();
        }

        // 1. –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä async/await
        private async Task DemoBasicAsyncAwait()
        {
            Console.WriteLine("--- 1. –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä ---");

            Console.WriteLine("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...");
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            var userTask = LoadUserAsync("user123");
            var settingsTask = LoadSettingsAsync("user123");
            
            // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            var user = await userTask;
            var settings = await settingsTask;
            
            Console.WriteLine($"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}");
            Console.WriteLine($"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {settings}");
            Console.WriteLine();
        }

        // 2. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ vs –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        private async Task DemoSequentialVsParallel()
        {
            Console.WriteLine("--- 2. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ vs –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ ---");

            // ‚ùå –ü–õ–û–•–û: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            Console.WriteLine("‚ùå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–º–µ–¥–ª–µ–Ω–Ω–æ):");
            var start = DateTime.Now;
            
            var data1 = await FetchDataAsync("API-1", 1000);
            var data2 = await FetchDataAsync("API-2", 1500);
            var data3 = await FetchDataAsync("API-3", 800);
            
            Console.WriteLine($"   –í—Ä–µ–º—è: {(DateTime.Now - start).TotalMilliseconds:F0}ms");

            // ‚úÖ –•–û–†–û–®–û: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            Console.WriteLine("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–±—ã—Å—Ç—Ä–æ):");
            start = DateTime.Now;
            
            var task1 = FetchDataAsync("API-1", 1000);
            var task2 = FetchDataAsync("API-2", 1500);
            var task3 = FetchDataAsync("API-3", 800);
            
            await Task.WhenAll(task1, task2, task3);
            
            Console.WriteLine($"   –í—Ä–µ–º—è: {(DateTime.Now - start).TotalMilliseconds:F0}ms");
            Console.WriteLine();
        }

        // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        private async Task DemoErrorHandling()
        {
            Console.WriteLine("--- 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---");

            try
            {
                // –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å
                await RiskyOperationAsync();
                Console.WriteLine("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
            }
            Console.WriteLine();
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        private async Task<string> LoadUserAsync(string userId)
        {
            Console.WriteLine($"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}...");
            await Task.Delay(500); // –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            return $"User({userId})";
        }

        private async Task<string> LoadSettingsAsync(string userId)
        {
            Console.WriteLine($"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {userId}...");
            await Task.Delay(300); // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
            return $"Settings({userId})";
        }

        private async Task<string> FetchDataAsync(string apiName, int delayMs)
        {
            Console.WriteLine($"   üì° –ó–∞–ø—Ä–æ—Å –∫ {apiName}...");
            await Task.Delay(delayMs);
            Console.WriteLine($"   ‚úÖ {apiName} –æ—Ç–≤–µ—Ç–∏–ª");
            return $"Data from {apiName}";
        }

        private async Task RiskyOperationAsync()
        {
            Console.WriteLine("üé≤ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é...");
            await Task.Delay(300);
            
            // –°–ª—É—á–∞–π–Ω–æ –ø–∞–¥–∞–µ–º
            if (new Random().Next(2) == 0)
                throw new InvalidOperationException("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!");
            
            Console.WriteLine("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }

        // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ async/await
        private void ShowImportance()
        {
            Console.WriteLine("--- üéØ –í–ê–ñ–ù–û–°–¢–¨ ASYNC/AWAIT ---");
            Console.WriteLine();
            
            Console.WriteLine("üî• –ë–ï–ó Async/Await (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–¥):");
            Console.WriteLine("   ‚Ä¢ –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
            Console.WriteLine("   ‚Ä¢ UI –∑–∞–≤–∏—Å–∞–µ—Ç –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö");
            Console.WriteLine("   ‚Ä¢ –ü–ª–æ—Ö–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞");
            Console.WriteLine("   ‚Ä¢ –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤");
            Console.WriteLine();
            
            Console.WriteLine("‚ú® –° Async/Await:");
            Console.WriteLine("   ‚Ä¢ üöÄ –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ - –ø–æ—Ç–æ–∫ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è");
            Console.WriteLine("   ‚Ä¢ üíª –û—Ç–∑—ã–≤—á–∏–≤—ã–π UI - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –∑–∞–≤–∏—Å–∞–µ—Ç");
            Console.WriteLine("   ‚Ä¢ üìà –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞");
            Console.WriteLine("   ‚Ä¢ üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ ThreadPool");
            Console.WriteLine("   ‚Ä¢ üß© –ü—Ä–æ—Å—Ç–æ—Ç–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–¥–∞");
            Console.WriteLine();
            
            Console.WriteLine("üìä –ú–ê–ì–ò–Ø:");
            Console.WriteLine("   –û–¥–∏–Ω –ø–æ—Ç–æ–∫ –º–æ–∂–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å –¢–´–°–Ø–ß–ò –∑–∞–ø—Ä–æ—Å–æ–≤!");
            Console.WriteLine("   –í–º–µ—Å—Ç–æ 1000 –ø–æ—Ç–æ–∫–æ–≤ -> 1 –ø–æ—Ç–æ–∫ + async/await = üöÄ");
            Console.WriteLine();
            
            Console.WriteLine("üèÜ –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:");
            Console.WriteLine("   ‚úÖ –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (HTTP, API)");
            Console.WriteLine("   ‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö");
            Console.WriteLine("   ‚úÖ –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏");
            Console.WriteLine("   ‚úÖ –õ—é–±—ã–µ I/O –æ–ø–µ—Ä–∞—Ü–∏–∏");
            Console.WriteLine("   ‚ùå CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–ª—É—á—à–µ Task.Run)");
        }
    }

    // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
    public class WeatherService
    {
        private static readonly HttpClient httpClient = new();

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
        public async Task<Dictionary<string, string>> GetWeatherForCitiesAsync(string[] cities)
        {
            var tasks = cities.Select(city => GetWeatherAsync(city));
            var results = await Task.WhenAll(tasks);
            
            return cities.Zip(results, (city, weather) => new { city, weather })
                        .ToDictionary(x => x.city, x => x.weather);
        }

        private async Task<string> GetWeatherAsync(string city)
        {
            // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã HTTP –∑–∞–ø—Ä–æ—Å –∫ API –ø–æ–≥–æ–¥—ã
            await Task.Delay(500); // –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            
            var temperatures = new[] { "‚òÄÔ∏è +25¬∞C", "üå§Ô∏è +20¬∞C", "üåßÔ∏è +15¬∞C", "‚ùÑÔ∏è -5¬∞C" };
            return temperatures[city.GetHashCode() % temperatures.Length];
        }
    }
} 