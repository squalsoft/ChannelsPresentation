using System;
using System.Collections.Concurrent;
using System.Threading;
using System.Threading.Tasks;

namespace ChannelsPresentation
{
    public class ConcurrentQueueExample
    {
        private readonly ConcurrentQueue<WorkItem> _queue = new();
        private readonly CancellationTokenSource _cancellationTokenSource = new();

        public async Task Run()
        {
            Console.WriteLine("=== ConcurrentQueue Producer/Consumer Example ===\n");

            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π (producers)
            var producers = new[]
            {
                Task.Run(() => ProducerAsync("Producer-1", 1000)),
                Task.Run(() => ProducerAsync("Producer-2", 1500)),
                Task.Run(() => ProducerAsync("Producer-3", 800))
            };

            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π (consumers)
            var consumers = new[]
            {
                Task.Run(() => ConsumerAsync("Consumer-A")),
                Task.Run(() => ConsumerAsync("Consumer-B")),
                Task.Run(() => ConsumerAsync("Consumer-C"))
            };

            // –†–∞–±–æ—Ç–∞–µ–º 10 —Å–µ–∫—É–Ω–¥
            await Task.Delay(10000);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            _cancellationTokenSource.Cancel();
            
            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await Task.WhenAll(producers);
            await Task.WhenAll(consumers);

            Console.WriteLine($"\n–û—Å—Ç–∞—Ç–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏: {_queue.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
        }

        private async Task ProducerAsync(string producerName, int intervalMs)
        {
            int itemId = 1;
            
            while (!_cancellationTokenSource.Token.IsCancellationRequested)
            {
                var workItem = new WorkItem($"{producerName}-Item-{itemId++}", DateTime.Now);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥—å (thread-safe –æ–ø–µ—Ä–∞—Ü–∏—è)
                _queue.Enqueue(workItem);
                
                Console.WriteLine($"üì§ {producerName} –ø—Ä–æ–∏–∑–≤–µ–ª: {workItem.Name}");
                
                try
                {
                    await Task.Delay(intervalMs, _cancellationTokenSource.Token);
                }
                catch (OperationCanceledException)
                {
                    break;
                }
            }
            
            Console.WriteLine($"‚úÖ {producerName} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
        }

        private async Task ConsumerAsync(string consumerName)
        {
            while (!_cancellationTokenSource.Token.IsCancellationRequested || !_queue.IsEmpty)
            {
                // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (thread-safe –æ–ø–µ—Ä–∞—Ü–∏—è)
                if (_queue.TryDequeue(out var workItem))
                {
                    Console.WriteLine($"üì• {consumerName} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {workItem.Name}");
                    
                    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    await Task.Delay(500);
                    
                    Console.WriteLine($"‚úÖ {consumerName} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É: {workItem.Name}");
                }
                else
                {
                    // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                    await Task.Delay(100);
                }
            }
            
            Console.WriteLine($"üèÅ {consumerName} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
        }
    }

    public record WorkItem(string Name, DateTime CreatedAt);

    // –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏
    public class BoundedConcurrentQueueExample
    {
        private readonly ConcurrentQueue<WorkItem> _queue = new();
        private readonly SemaphoreSlim _semaphore;
        private readonly CancellationTokenSource _cancellationTokenSource = new();

        public BoundedConcurrentQueueExample(int maxQueueSize)
        {
            _semaphore = new SemaphoreSlim(maxQueueSize, maxQueueSize);
        }

        public async Task Run()
        {
            Console.WriteLine("\n=== Bounded ConcurrentQueue Example ===\n");

            var producer = Task.Run(() => BoundedProducerAsync("BoundedProducer"));
            var consumer = Task.Run(() => BoundedConsumerAsync("BoundedConsumer"));

            await Task.Delay(5000);
            _cancellationTokenSource.Cancel();

            await Task.WhenAll(producer, consumer);
        }

        private async Task BoundedProducerAsync(string producerName)
        {
            int itemId = 1;

            while (!_cancellationTokenSource.Token.IsCancellationRequested)
            {
                try
                {
                    // –ñ–¥–µ–º, –ø–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ
                    await _semaphore.WaitAsync(_cancellationTokenSource.Token);
                    
                    var workItem = new WorkItem($"{producerName}-Item-{itemId++}", DateTime.Now);
                    _queue.Enqueue(workItem);
                    
                    Console.WriteLine($"üì§ {producerName} –ø—Ä–æ–∏–∑–≤–µ–ª: {workItem.Name} (–æ—á–µ—Ä–µ–¥—å: {_queue.Count})");
                    
                    await Task.Delay(200, _cancellationTokenSource.Token);
                }
                catch (OperationCanceledException)
                {
                    break;
                }
            }
        }

        private async Task BoundedConsumerAsync(string consumerName)
        {
            while (!_cancellationTokenSource.Token.IsCancellationRequested || !_queue.IsEmpty)
            {
                if (_queue.TryDequeue(out var workItem))
                {
                    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–æ –≤ —Å–µ–º–∞—Ñ–æ—Ä–µ
                    _semaphore.Release();
                    
                    Console.WriteLine($"üì• {consumerName} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {workItem.Name}");
                    await Task.Delay(800); // –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    Console.WriteLine($"‚úÖ {consumerName} –∑–∞–≤–µ—Ä—à–∏–ª: {workItem.Name}");
                }
                else
                {
                    await Task.Delay(100);
                }
            }
        }
    }
} 