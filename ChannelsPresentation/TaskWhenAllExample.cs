using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace ChannelsPresentation
{
    public class TaskWhenAllExample
    {
        public async Task Run()
        {
            Console.WriteLine("=== Task.WhenAll - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –º–∞–≥–∏—è ===\n");

            await DemoBasicWhenAll();
            await DemoSequentialVsParallel();
            await DemoErrorHandling();
            await DemoRealWorldScenarios();
            ShowImportance();
        }

        // 1. –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä Task.WhenAll
        private async Task DemoBasicWhenAll()
        {
            Console.WriteLine("--- 1. –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä ---");

            Console.WriteLine("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º 3 –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...");


            await DownloadDataAsync("–°–µ—Ä–≤–µ—Ä-A", 1000); // 1 —Å–µ–∫
            await DownloadDataAsync("–°–µ—Ä–≤–µ—Ä-B", 1500); // 1.5 —Å–µ–∫
            await DownloadDataAsync("–°–µ—Ä–≤–µ—Ä-C", 800); // 0.8 —Å–µ–∫
            // –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 3.3 —Å–µ–∫
            
            var task1 = DownloadDataAsync("–°–µ—Ä–≤–µ—Ä-A", 1000); // 1 —Å–µ–∫
            var task2 = DownloadDataAsync("–°–µ—Ä–≤–µ—Ä-B", 1500); // 1.5 —Å–µ–∫
            var task3 = DownloadDataAsync("–°–µ—Ä–≤–µ—Ä-C", 800); // 0.8 —Å–µ–∫

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –í–°–ï–• –∑–∞–¥–∞—á
            var results = await Task.WhenAll(task1, task2, task3); 
            // –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 1.5 —Å–µ–∫

            Console.WriteLine("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
            foreach (var result in results)
            {
                Console.WriteLine($"   üì¶ {result}");
            }
            Console.WriteLine();
        }

        // 2. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ vs –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        private async Task DemoSequentialVsParallel()
        {
            Console.WriteLine("--- 2. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ vs –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ ---");

            // ‚ùå –ú–ï–î–õ–ï–ù–ù–û: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            Console.WriteLine("‚ùå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:");
            var sw = Stopwatch.StartNew();
            
            await ProcessOrderAsync("–ó–∞–∫–∞–∑-1");
            await ProcessOrderAsync("–ó–∞–∫–∞–∑-2");
            await ProcessOrderAsync("–ó–∞–∫–∞–∑-3");
            
            sw.Stop();
            Console.WriteLine($"   ‚è±Ô∏è –í—Ä–µ–º—è: {sw.ElapsedMilliseconds}ms");

            // ‚úÖ –ë–´–°–¢–†–û: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            Console.WriteLine("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (Task.WhenAll):");
            sw.Restart();
            
            await Task.WhenAll(
                ProcessOrderAsync("–ó–∞–∫–∞–∑-1"),
                ProcessOrderAsync("–ó–∞–∫–∞–∑-2"),
                ProcessOrderAsync("–ó–∞–∫–∞–∑-3")
            );
            
            sw.Stop();
            Console.WriteLine($"   ‚ö° –í—Ä–µ–º—è: {sw.ElapsedMilliseconds}ms");
            Console.WriteLine("   üéØ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ ~3 —Ä–∞–∑–∞!");
            Console.WriteLine();
        }

        // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        private async Task DemoErrorHandling()
        {
            Console.WriteLine("--- 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---");

            try
            {
                // –û–¥–Ω–∞ –∑–∞–¥–∞—á–∞ —É–ø–∞–¥–µ—Ç, –Ω–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç —Ä–∞–±–æ—Ç—É
                await Task.WhenAll(
                    ReliableTaskAsync("–ó–∞–¥–∞—á–∞-1"),
                    FailingTaskAsync("–ó–∞–¥–∞—á–∞-2"), // –≠—Ç–∞ —É–ø–∞–¥–µ—Ç
                    ReliableTaskAsync("–ó–∞–¥–∞—á–∞-3")
                );
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û–¥–Ω–∞ –∏–∑ –∑–∞–¥–∞—á —É–ø–∞–ª–∞: {ex.Message}");
                Console.WriteLine("üí° –ù–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ!");
            }
            Console.WriteLine();
        }

        // 4. –†–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        private async Task DemoRealWorldScenarios()
        {
            Console.WriteLine("--- 4. –†–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ---");

            // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö API
            await LoadDashboardDataAsync();

            // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
            await ProcessMultipleFilesAsync();

            // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await SendNotificationsAsync();
        }

        // –†–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        private async Task LoadDashboardDataAsync()
        {
            Console.WriteLine("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥...");
            var sw = Stopwatch.StartNew();

            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            var tasks = new[]
            {
                LoadUserProfileAsync(),
                LoadSalesDataAsync(),
                LoadAnalyticsAsync(),
                LoadNotificationsAsync(),
                LoadRecentOrdersAsync()
            };

            var results = await Task.WhenAll(tasks);
            sw.Stop();

            Console.WriteLine($"‚úÖ –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {sw.ElapsedMilliseconds}ms:");
            foreach (var result in results)
            {
                Console.WriteLine($"   üìä {result}");
            }
            Console.WriteLine();
        }

        // –†–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        private async Task ProcessMultipleFilesAsync()
        {
            Console.WriteLine("üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã...");
            
            var files = new[] { "report.pdf", "data.xlsx", "backup.zip", "logs.txt" };
            
            var tasks = files.Select(file => ProcessFileAsync(file));
            await Task.WhenAll(tasks);
            
            Console.WriteLine("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
            Console.WriteLine();
        }

        // –†–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        private async Task SendNotificationsAsync()
        {
            Console.WriteLine("üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...");
            
            var users = new[] { "user1@mail.ru", "user2@mail.ru", "user3@mail.ru", "user4@mail.ru" };
            
            var tasks = users.Select(user => SendEmailAsync(user));
            await Task.WhenAll(tasks);
            
            Console.WriteLine("‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!");
            Console.WriteLine();
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        private async Task<string> DownloadDataAsync(string server, int delayMs)
        {
            Console.WriteLine($"   üîÑ –°–∫–∞—á–∏–≤–∞–µ–º —Å {server}...");
            await Task.Delay(delayMs);
            Console.WriteLine($"   ‚úÖ {server} –∑–∞–≤–µ—Ä—à–µ–Ω");
            return $"–î–∞–Ω–Ω—ã–µ —Å {server}";
        }

        private async Task ProcessOrderAsync(string orderId)
        {
            Console.WriteLine($"   üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {orderId}...");
            await Task.Delay(500);
            Console.WriteLine($"   ‚úÖ {orderId} –≥–æ—Ç–æ–≤");
        }

        private async Task<string> ReliableTaskAsync(string name)
        {
            Console.WriteLine($"   üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º {name}...");
            await Task.Delay(300);
            Console.WriteLine($"   ‚úÖ {name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            return $"–†–µ–∑—É–ª—å—Ç–∞—Ç {name}";
        }

        private async Task<string> FailingTaskAsync(string name)
        {
            Console.WriteLine($"   üí• {name} —Å–µ–π—á–∞—Å —É–ø–∞–¥–µ—Ç...");
            await Task.Delay(200);
            throw new InvalidOperationException($"{name} —É–ø–∞–ª–∞ —Å –æ—à–∏–±–∫–æ–π!");
        }

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        private async Task<string> LoadUserProfileAsync()
        {
            await Task.Delay(300);
            return "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";
        }

        private async Task<string> LoadSalesDataAsync()
        {
            await Task.Delay(500);
            return "–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂";
        }

        private async Task<string> LoadAnalyticsAsync()
        {
            await Task.Delay(400);
            return "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞";
        }

        private async Task<string> LoadNotificationsAsync()
        {
            await Task.Delay(200);
            return "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è";
        }

        private async Task<string> LoadRecentOrdersAsync()
        {
            await Task.Delay(600);
            return "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã";
        }

        private async Task ProcessFileAsync(string fileName)
        {
            Console.WriteLine($"   üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {fileName}...");
            await Task.Delay(300);
            Console.WriteLine($"   ‚úÖ {fileName} –≥–æ—Ç–æ–≤");
        }

        private async Task SendEmailAsync(string email)
        {
            Console.WriteLine($"   üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ {email}...");
            await Task.Delay(250);
            Console.WriteLine($"   ‚úÖ –ü–∏—Å—å–º–æ {email} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
        }

        // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ Task.WhenAll
        private void ShowImportance()
        {
            Console.WriteLine("--- üéØ –í–ê–ñ–ù–û–°–¢–¨ TASK.WHENALL ---");
            Console.WriteLine();
            
            Console.WriteLine("‚ùå –ë–ï–ó Task.WhenAll:");
            Console.WriteLine("   ‚Ä¢ –ó–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ");
            Console.WriteLine("   ‚Ä¢ –í—Ä–µ–º—è = —Å—É–º–º–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á");
            Console.WriteLine("   ‚Ä¢ –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤");
            Console.WriteLine("   ‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
            Console.WriteLine();
            
            Console.WriteLine("‚ú® –° Task.WhenAll:");
            Console.WriteLine("   ‚Ä¢ üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å—Ä–∞–∑—É");
            Console.WriteLine("   ‚Ä¢ ‚ö° –í—Ä–µ–º—è = –≤—Ä–µ–º—è —Å–∞–º–æ–π –¥–æ–ª–≥–æ–π –∑–∞–¥–∞—á–∏");
            Console.WriteLine("   ‚Ä¢ üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤");
            Console.WriteLine("   ‚Ä¢ üìà –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ N —Ä–∞–∑ (–≥–¥–µ N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á)");
            Console.WriteLine("   ‚Ä¢ üõ°Ô∏è –ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –í–°–ï–• –∑–∞–¥–∞—á");
            Console.WriteLine();
            
            Console.WriteLine("üìä –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê:");
            Console.WriteLine("   3 –∑–∞–¥–∞—á–∏ –ø–æ 1 —Å–µ–∫—É–Ω–¥–µ –∫–∞–∂–¥–∞—è:");
            Console.WriteLine("   ‚Ä¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ: 1 + 1 + 1 = 3 —Å–µ–∫");
            Console.WriteLine("   ‚Ä¢ Task.WhenAll: max(1, 1, 1) = 1 —Å–µ–∫");
            Console.WriteLine("   ‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: 300%! üöÄ");
            Console.WriteLine();
            
            Console.WriteLine("üèÜ –ò–î–ï–ê–õ–¨–ù–û –î–õ–Ø:");
            Console.WriteLine("   ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö API");
            Console.WriteLine("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤");
            Console.WriteLine("   ‚úÖ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (email, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)");
            Console.WriteLine("   ‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è");
            Console.WriteLine("   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤");
            Console.WriteLine();
            
            Console.WriteLine("‚ö†Ô∏è –í–ê–ñ–ù–û:");
            Console.WriteLine("   ‚Ä¢ –ï—Å–ª–∏ –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ —É–ø–∞–ª–∞ - Task.WhenAll —Ç–æ–∂–µ —É–ø–∞–¥–µ—Ç");
            Console.WriteLine("   ‚Ä¢ –ù–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç —Ä–∞–±–æ—Ç—É –≤ —Ñ–æ–Ω–µ");
            Console.WriteLine("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ try-catch –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫");
        }
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    public class AdvancedTaskWhenAllExample
    {
        public async Task DemoAdvancedPatterns()
        {
            Console.WriteLine("\n--- üî• –ü–†–û–î–í–ò–ù–£–¢–´–ï –ü–ê–¢–¢–ï–†–ù–´ ---");

            // –ü–∞—Ç—Ç–µ—Ä–Ω 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
            await ProcessWithIndexes();

            // –ü–∞—Ç—Ç–µ—Ä–Ω 2: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
            await ProcessWithThrottling();
        }

        private async Task ProcessWithIndexes()
        {
            Console.WriteLine("üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏:");
            
            var urls = new[] { "api1.com", "api2.com", "api3.com" };
            var tasks = urls.Select((url, index) => 
                FetchDataWithIndexAsync(index, url));
            
            var results = await Task.WhenAll(tasks);
            
            foreach (var result in results)
            {
                Console.WriteLine($"   {result}");
            }
            Console.WriteLine();
        }

        private async Task ProcessWithThrottling()
        {
            Console.WriteLine("üéöÔ∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ (–ø–æ 2 –∑–∞–¥–∞—á–∏):");
            
            var items = Enumerable.Range(1, 8).ToList();
            const int batchSize = 2;
            
            for (int i = 0; i < items.Count; i += batchSize)
            {
                var batch = items.Skip(i).Take(batchSize);
                var tasks = batch.Select(item => ProcessItemAsync(item));
                
                await Task.WhenAll(tasks);
                Console.WriteLine($"   Batch {i/batchSize + 1} –∑–∞–≤–µ—Ä—à–µ–Ω");
            }
        }

        private async Task<string> FetchDataWithIndexAsync(int index, string url)
        {
            await Task.Delay(300);
            return $"‚Ññ{index}: –î–∞–Ω–Ω—ã–µ —Å {url}";
        }

        private async Task ProcessItemAsync(int item)
        {
            Console.WriteLine($"     üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç {item}");
            await Task.Delay(500);
            Console.WriteLine($"     ‚úÖ –≠–ª–µ–º–µ–Ω—Ç {item} –≥–æ—Ç–æ–≤");
        }
    }
} 