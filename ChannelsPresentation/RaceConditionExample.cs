using System.Diagnostics;

namespace ChannelsPresentation;

/// <summary>
/// Race Condition –∏ –µ—ë —Ä–µ—à–µ–Ω–∏—è
/// </summary>
public class  RaceConditionExample
{
    private int _counter = 0;
    private int _safeCounter = 0;
    private readonly object _lock = new();

    public async Task Run()
    {
        Console.WriteLine("=== Race Condition: –ü—Ä–æ–±–ª–µ–º–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ ===\n");
        
        await DemonstrateRaceCondition();
        Console.WriteLine();
        await DemonstrateSafeSolution();
        Console.WriteLine();
    }

    // ‚ùå –ü–†–û–ë–õ–ï–ú–ê: Race Condition
    private async Task DemonstrateRaceCondition()
    {
        Console.WriteLine("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Race Condition");
        Console.WriteLine("–ó–∞–ø—É—Å–∫–∞–µ–º 5 –ø–æ—Ç–æ–∫–æ–≤, –∫–∞–∂–¥—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫ 10,000 —Ä–∞–∑");
        Console.WriteLine("–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 50,000\n");

        _counter = 0;
        var tasks = new List<Task>();

        var stopwatch = Stopwatch.StartNew();

        // –ó–∞–ø—É—Å–∫–∞–µ–º 5 –ø–æ—Ç–æ–∫–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        for (int i = 0; i < 5; i++)
        {
            int threadId = i + 1;
            tasks.Add(Task.Run(() => UnsafeIncrement(threadId)));
        }

        await Task.WhenAll(tasks);
        stopwatch.Stop();

        Console.WriteLine($"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {_counter}");
        Console.WriteLine($"–ü–æ—Ç–µ—Ä—è–Ω–æ: {50000 - _counter} –æ–ø–µ—Ä–∞—Ü–∏–π");
    }

    private void UnsafeIncrement(int threadId)
    {
        for (int i = 0; i < 10000; i++)
        {
            // RACE CONDITION: –ù–µ –∞—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è!
            // 1. –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ _counter
            // 2. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1  
            // 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            // –ú–µ–∂–¥—É —ç—Ç–∏–º–∏ —à–∞–≥–∞–º–∏ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å _counter!
            _counter++;
        }
        Console.WriteLine($"üßµ –ü–æ—Ç–æ–∫ {threadId} –∑–∞–≤–µ—Ä—à—ë–Ω");
    }

    // –†–ï–®–ï–ù–ò–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å lock
    private async Task DemonstrateSafeSolution()
    {
        Console.WriteLine("‚úÖ –†–ï–®–ï–ù–ò–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å lock");
        Console.WriteLine("–¢–æ—Ç –∂–µ —Ç–µ—Å—Ç, –Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π\n");

        _safeCounter = 0;
        var tasks = new List<Task>();

        var stopwatch = Stopwatch.StartNew();

        for (int i = 0; i < 5; i++)
        {
            int threadId = i + 1;
            tasks.Add(Task.Run(() => SafeIncrement(threadId)));
        }

        await Task.WhenAll(tasks);
        stopwatch.Stop();

        Console.WriteLine($"–†–µ–∑—É–ª—å—Ç–∞—Ç: {_safeCounter}");
        Console.WriteLine($"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: {(_safeCounter == 50000 ? "–ü–†–ê–í–ò–õ–¨–ù–û" : "–û–®–ò–ë–ö–ê")}");
    }

    private void SafeIncrement(int threadId)
    {
        for (int i = 0; i < 10000; i++)
        {
            // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å lock
            lock (_lock)
            {
                _safeCounter++;
            }
        }
        Console.WriteLine($"üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ—Ç–æ–∫ {threadId} –∑–∞–≤–µ—Ä—à—ë–Ω");
    }
}