using System.Diagnostics;

namespace ChannelsPresentation;

/// <summary>
/// Deadlock –∏ –µ—ë —Ä–µ—à–µ–Ω–∏—è
/// </summary>
public class DeadlockExample
{
    private readonly object _lock1 = new();
    private readonly object _lock2 = new();

    public async Task Run()
    {
        Console.WriteLine("=== Deadlock: –ü—Ä–æ–±–ª–µ–º–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ ===\n");
        
        await DemonstrateDeadlock();
        Console.WriteLine();
        await DemonstrateSolution();
        Console.WriteLine();
        ShowDeadlockPatterns();
    }

    // –ü–†–û–ë–õ–ï–ú–ê: Deadlock (–≤–∑–∞–∏–º–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)
    private async Task DemonstrateDeadlock()
    {
        Console.WriteLine("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Deadlock");
        Console.WriteLine("–î–≤–∞ –ø–æ—Ç–æ–∫–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Ä–∞–∑–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ...\n");

        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(3));
        
        try
        {
            var task1 = Task.Run(() =>
            {
                lock (_lock1)
                {
                    Console.WriteLine("–ü–æ—Ç–æ–∫ 1: –ó–∞—Ö–≤–∞—Ç–∏–ª lock1");
                    Thread.Sleep(100); // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
                    
                    Console.WriteLine("–ü–æ—Ç–æ–∫ 1: –ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å lock2...");
                    lock (_lock2) // ‚ö†Ô∏è DEADLOCK! –ü–æ—Ç–æ–∫ 2 —É–∂–µ –¥–µ—Ä–∂–∏—Ç lock2
                    {
                        Console.WriteLine("–ü–æ—Ç–æ–∫ 1: –ó–∞—Ö–≤–∞—Ç–∏–ª lock2 (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è)");
                    }
                }
            });

            var task2 = Task.Run(() =>
            {
                lock (_lock2)
                {
                    Console.WriteLine("–ü–æ—Ç–æ–∫ 2: –ó–∞—Ö–≤–∞—Ç–∏–ª lock2");
                    Thread.Sleep(100); // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
                    
                    Console.WriteLine("–ü–æ—Ç–æ–∫ 2: –ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å lock1...");
                    lock (_lock1) // ‚ö†Ô∏è DEADLOCK! –ü–æ—Ç–æ–∫ 1 —É–∂–µ –¥–µ—Ä–∂–∏—Ç lock1
                    {
                        Console.WriteLine("–ü–æ—Ç–æ–∫ 2: –ó–∞—Ö–≤–∞—Ç–∏–ª lock1 (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è)");
                    }
                }
            });

            await Task.WhenAll(task1, task2).WaitAsync(cts.Token);
            Console.WriteLine("‚úÖ –ó–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø—Ä–∏ deadlock)");
        }
        catch (TimeoutException)
        {
            Console.WriteLine("‚è∞ TIMEOUT: Deadlock –æ–±–Ω–∞—Ä—É–∂–µ–Ω!");
            Console.WriteLine("üíÄ –ü–æ—Ç–æ–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π deadlock\n");
        }
    }

    // ‚úÖ –†–ï–®–ï–ù–ò–ï: –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    private async Task DemonstrateSolution()
    {
        Console.WriteLine("‚úÖ –†–ï–®–ï–ù–ò–ï: –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫");
        Console.WriteLine("–û–±–∞ –ø–æ—Ç–æ–∫–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ\n");

        var stopwatch = Stopwatch.StartNew();

        var task1 = Task.Run(() =>
        {
            // ‚úÖ –í—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ lock1, –ø–æ—Ç–æ–º lock2
            lock (_lock1)
            {
                Console.WriteLine("–ü–æ—Ç–æ–∫ 1: –ó–∞—Ö–≤–∞—Ç–∏–ª lock1");
                Thread.Sleep(50);
                
                lock (_lock2)
                {
                    Console.WriteLine("–ü–æ—Ç–æ–∫ 1: –ó–∞—Ö–≤–∞—Ç–∏–ª lock2");
                    Thread.Sleep(50);
                    Console.WriteLine("–ü–æ—Ç–æ–∫ 1: –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                }
            }
        });

        var task2 = Task.Run(() =>
        {
            // ‚úÖ –¢–æ—Ç –∂–µ –ø–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ lock1, –ø–æ—Ç–æ–º lock2
            lock (_lock1)
            {
                Console.WriteLine("–ü–æ—Ç–æ–∫ 2: –ó–∞—Ö–≤–∞—Ç–∏–ª lock1");
                Thread.Sleep(50);
                
                lock (_lock2)
                {
                    Console.WriteLine("–ü–æ—Ç–æ–∫ 2: –ó–∞—Ö–≤–∞—Ç–∏–ª lock2");
                    Thread.Sleep(50);
                    Console.WriteLine("–ü–æ—Ç–æ–∫ 2: –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                }
            }
        });

        await Task.WhenAll(task1, task2);
        stopwatch.Stop();
        
        Console.WriteLine($"‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∑–∞ {stopwatch.ElapsedMilliseconds}ms");
        Console.WriteLine("üéØ Deadlock –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω!\n");
    }

    private void ShowDeadlockPatterns()
    {
        Console.WriteLine("üîß –°–ü–û–°–û–ë–´ –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø DEADLOCK:\n");

        Console.WriteLine("1Ô∏è‚É£ –£–ü–û–†–Ø–î–û–ß–ï–ù–ù–´–ô –ó–ê–•–í–ê–¢:");
        Console.WriteLine(@"
// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ - —Ä–∞–∑–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫:
Task 1: lock(A) -> lock(B)
Task 2: lock(B) -> lock(A)

// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫:
Task 1: lock(A) -> lock(B)
Task 2: lock(A) -> lock(B)");

        Console.WriteLine("\n2Ô∏è‚É£ TIMEOUT –ü–†–ò –ó–ê–•–í–ê–¢–ï:");
        Console.WriteLine(@"
if (Monitor.TryEnter(lock1, TimeSpan.FromSeconds(1)))
{
    try
    {
        if (Monitor.TryEnter(lock2, TimeSpan.FromSeconds(1)))
        {
            try { /* —Ä–∞–±–æ—Ç–∞ */ }
            finally { Monitor.Exit(lock2); }
        }
    }
    finally { Monitor.Exit(lock1); }
}");

        Console.WriteLine("\n3Ô∏è‚É£ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï SEMAPHORESLIM:");
        Console.WriteLine(@"
var semaphore = new SemaphoreSlim(1, 1);
await semaphore.WaitAsync(timeout);
try { /* —Ä–∞–±–æ—Ç–∞ */ }
finally { semaphore.Release(); }");

        Console.WriteLine("\nüí° –ó–û–õ–û–¢–´–ï –ü–†–ê–í–ò–õ–ê:");
        Console.WriteLine("‚úÖ –í—Å–µ–≥–¥–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–π—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ");
        Console.WriteLine("‚úÖ –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫");
        Console.WriteLine("‚úÖ –ò–∑–±–µ–≥–∞–π—Ç–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫");
        Console.WriteLine("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ timeout –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ");
        Console.WriteLine("‚úÖ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ lock-free –∞–ª–≥–æ—Ä–∏—Ç–º—ã");
    }
}