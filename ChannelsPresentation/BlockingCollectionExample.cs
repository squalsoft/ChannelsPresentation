using System;
using System.Collections.Concurrent;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace ChannelsPresentation
{
    public class BlockingCollectionExample
    {
        public async Task Run()
        {
            Console.WriteLine("=== BlockingCollection Examples ===\n");

            await BasicExample();
            await BoundedCapacityExample();
            await CompletionSignalingExample();
            await MultipleProducersConsumersExample();
            await DifferentCollectionTypesExample();
        }

        // 1. –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
        private async Task BasicExample()
        {
            Console.WriteLine("--- 1. –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä ---");
            
            var collection = new BlockingCollection<string>();

            // Producer –∑–∞–¥–∞—á–∞
            var producer = Task.Run(() =>
            {
                for (int i = 1; i <= 5; i++)
                {
                    var item = $"Item-{i}";
                    collection.Add(item);
                    Console.WriteLine($"üì§ –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω: {item}");
                    Thread.Sleep(500);
                }
                collection.CompleteAdding(); // –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                Console.WriteLine("‚úÖ Producer –∑–∞–≤–µ—Ä—à–µ–Ω");
            });

            // Consumer –∑–∞–¥–∞—á–∞
            var consumer = Task.Run(() =>
            {
                // GetConsumingEnumerable –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø—Ä–∏ CompleteAdding
                foreach (var item in collection.GetConsumingEnumerable())
                {
                    Console.WriteLine($"üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {item}");
                    Thread.Sleep(800); // –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    Console.WriteLine($"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {item}");
                }
                Console.WriteLine("üèÅ Consumer –∑–∞–≤–µ—Ä—à–µ–Ω");
            });

            await Task.WhenAll(producer, consumer);
            Console.WriteLine();
        }

        // 2. –ü—Ä–∏–º–µ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –µ–º–∫–æ—Å—Ç–∏
        private async Task BoundedCapacityExample()
        {
            Console.WriteLine("--- 2. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –µ–º–∫–æ—Å—Ç—å (3 —ç–ª–µ–º–µ–Ω—Ç–∞) ---");
            
            var collection = new BlockingCollection<int>(boundedCapacity: 3);

            var producer = Task.Run(() =>
            {
                for (int i = 1; i <= 8; i++)
                {
                    Console.WriteLine($"üîÑ Producer –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å: {i}");
                    collection.Add(i); // –ë–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
                    Console
                        .WriteLine($"üì§ –î–æ–±–∞–≤–ª–µ–Ω: {i} (–≤ –æ—á–µ—Ä–µ–¥–∏: {collection.Count})");
                    Thread.Sleep(200);
                }
                collection.CompleteAdding();
            });

            var consumer = Task.Run(() =>
            {
                Thread.Sleep(1000); // –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                
                while (!collection.IsCompleted)
                {
                    if (collection.TryTake(out int item, 100))
                    {
                        Console.WriteLine(
                            $"üì• –í–∑—è—Ç: {item} (–≤ –æ—á–µ—Ä–µ–¥–∏: {collection.Count})");
                        Thread.Sleep(600); // –ú–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    }
                }
            });

            await Task.WhenAll(producer, consumer);
            Console.WriteLine();
        }

        // 3. –ü—Ä–∏–º–µ—Ä —Å —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        private async Task CompletionSignalingExample()
        {
            Console.WriteLine("--- 3. –°–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---");
            
            var collection = new BlockingCollection<WorkItem>();

            var producer = Task.Run(() =>
            {
                for (int i = 1; i <= 3; i++)
                {
                    var workItem = new WorkItem($"Task-{i}", DateTime.Now);
                    collection.Add(workItem);
                    Console.WriteLine($"üì§ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {workItem.Name}");
                    Thread.Sleep(300);
                }
                
                Console.WriteLine("üö´ –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
                collection.CompleteAdding();
            });

            var consumer = Task.Run(() =>
            {
                try
                {
                    while (true)
                    {
                        // Take() –≤—ã–±—Ä–æ—Å–∏—Ç InvalidOperationException –∫–æ–≥–¥–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –ø—É—Å—Ç–∞
                        var item = collection.Take();
                        Console.WriteLine($"üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {item.Name}");
                        Thread.Sleep(500);
                        Console.WriteLine($"‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª–∏: {item.Name}");
                    }
                }
                catch (InvalidOperationException)
                {
                    Console.WriteLine("üèÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, consumer –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è");
                }
            });

            await Task.WhenAll(producer, consumer);
            Console.WriteLine();
        }

        // 4. –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
        private async Task MultipleProducersConsumersExample()
        {
            Console.WriteLine("--- 4. –ù–µ—Å–∫–æ–ª—å–∫–æ producers/consumers ---");
            
            var collection = new BlockingCollection<string>(10);

            // –ó–∞–ø—É—Å–∫–∞–µ–º 2 –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
            var producers = new[]
            {
                Task.Run(() => ProducerWorker("Producer-A", collection, 200)),
                Task.Run(() => ProducerWorker("Producer-B", collection, 300))
            };

            // –ó–∞–ø—É—Å–∫–∞–µ–º 2 –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
            var consumers = new[]
            {
                Task.Run(() => ConsumerWorker("Consumer-1", collection)),
                Task.Run(() => ConsumerWorker("Consumer-2", collection))
            };

            // –†–∞–±–æ—Ç–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
            await Task.Delay(2000);
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            collection.CompleteAdding();
            
            await Task.WhenAll(producers.Concat(consumers).ToArray());
            Console.WriteLine();
        }

        private void ProducerWorker(string name, BlockingCollection<string> collection, int delay)
        {
            int counter = 1;
            try
            {
                while (!collection.IsAddingCompleted)
                {
                    var item = $"{name}-Item-{counter++}";
                    if (collection.TryAdd(item, 50)) // Timeout 50ms
                    {
                        Console.WriteLine($"üì§ {name}: {item}");
                    }
                    Thread.Sleep(delay);
                }
            }
            catch (InvalidOperationException)
            {
                Console.WriteLine($"‚úÖ {name} –∑–∞–≤–µ—Ä—à–µ–Ω");
            }
        }

        private void ConsumerWorker(string name, BlockingCollection<string> collection)
        {
            foreach (var item in collection.GetConsumingEnumerable())
            {
                Console.WriteLine($"üì• {name} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {item}");
                Thread.Sleep(400);
            }
            Console.WriteLine($"üèÅ {name} –∑–∞–≤–µ—Ä—à–µ–Ω");
        }

        // 5. –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –±–∞–∑–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
        private async Task DifferentCollectionTypesExample()
        {
            Console.WriteLine("--- 5. –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π ---");

            // FIFO (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - ConcurrentQueue)
            Console.WriteLine("FIFO (Queue):");
            var fifoCollection = new BlockingCollection<int>();
            await DemonstrateCollectionOrder(fifoCollection, "FIFO");

            // LIFO (Stack)
            Console.WriteLine("LIFO (Stack):");
            var lifoCollection = new BlockingCollection<int>(new ConcurrentStack<int>());
            await DemonstrateCollectionOrder(lifoCollection, "LIFO");

            // Unordered (Bag)
            Console.WriteLine("Unordered (Bag):");
            var bagCollection = new BlockingCollection<int>(new ConcurrentBag<int>());
            await DemonstrateCollectionOrder(bagCollection, "Bag");
        }

        private async Task DemonstrateCollectionOrder(BlockingCollection<int> collection, string type)
        {
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            for (int i = 1; i <= 5; i++)
            {
                collection.Add(i);
            }
            collection.CompleteAdding();

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫
            var result = new List<int>();
            foreach (var item in collection.GetConsumingEnumerable())
            {
                result.Add(item);
            }
            
            Console.WriteLine($"  –î–æ–±–∞–≤–∏–ª–∏: [1, 2, 3, 4, 5]");
            Console.WriteLine($"  –ü–æ–ª—É—á–∏–ª–∏ ({type}): [{string.Join(", ", result)}]");
            Console.WriteLine();
        }
    }
} 