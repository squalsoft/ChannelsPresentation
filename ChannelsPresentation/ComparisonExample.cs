using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Channels;
using System.Threading.Tasks;

namespace ChannelsPresentation
{
    public class ComparisonExample
    {
        private readonly Random _random = new();

        public async Task Run()
        {
            Console.WriteLine("=== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: Channels vs async/await vs Task.WhenAll ===\n");

            const int itemsCount = 100;
            const int producersCount = 3;
            const int consumersCount = 2;

            Console.WriteLine($"–ó–∞–¥–∞—á–∞: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å {itemsCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å {producersCount} –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º–∏ –∏ {consumersCount} –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è–º–∏\n");

            // 1. Channels –ø–æ–¥—Ö–æ–¥
            await RunChannelsExample(itemsCount, producersCount, consumersCount);

            // 2. async/await —Å ConcurrentQueue
            await RunAsyncAwaitExample(itemsCount, producersCount, consumersCount);

            // 3. Task.WhenAll –ø–æ–¥—Ö–æ–¥
            await RunTaskWhenAllExample(itemsCount, producersCount, consumersCount);

            // 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await PerformanceComparison(itemsCount);
        }

        // 1. CHANNELS - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π producer/consumer
        private async Task RunChannelsExample(int itemsCount, int producersCount, int consumersCount)
        {
            Console.WriteLine("--- 1. CHANNELS –ø–æ–¥—Ö–æ–¥ ---");
            var stopwatch = Stopwatch.StartNew();

            // –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –µ–º–∫–æ—Å—Ç—å—é
            var channel = Channel.CreateBounded<DataItem>(capacity: 10);
            var writer = channel.Writer;
            var reader = channel.Reader;

            var processedCount = 0;

            // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏
            var producers = new Task[producersCount];
            for (int i = 0; i < producersCount; i++)
            {
                int producerId = i;
                producers[i] = Task.Run(async () =>
                {
                    for (int j = 0; j < itemsCount / producersCount; j++)
                    {
                        var item = new DataItem($"P{producerId}-Item{j}", _random.Next(100, 500));
                        await writer.WriteAsync(item);
                        Console.WriteLine($"üì§ [Channels] Producer {producerId}: {item.Name}");
                        await Task.Delay(50);
                    }
                });
            }

            // –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
            var consumers = new Task[consumersCount];
            for (int i = 0; i < consumersCount; i++)
            {
                int consumerId = i;
                consumers[i] = Task.Run(async () =>
                {
                    await foreach (var item in reader.ReadAllAsync())
                    {
                        await ProcessDataItem(item, $"Consumer{consumerId}");
                        Interlocked.Increment(ref processedCount);
                    }
                });
            }

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
            await Task.WhenAll(producers);
            writer.Complete();

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
            await Task.WhenAll(consumers);

            stopwatch.Stop();
            Console.WriteLine($"‚úÖ [Channels] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processedCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ {stopwatch.ElapsedMilliseconds}ms\n");
        }

        // 2. ASYNC/AWAIT —Å ConcurrentQueue
        private async Task RunAsyncAwaitExample(int itemsCount, int producersCount, int consumersCount)
        {
            Console.WriteLine("--- 2. ASYNC/AWAIT + ConcurrentQueue –ø–æ–¥—Ö–æ–¥ ---");
            var stopwatch = Stopwatch.StartNew();

            var queue = new ConcurrentQueue<DataItem>();
            var completed = false;
            var processedCount = 0;

            // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏
            var producers = new Task[producersCount];
            for (int i = 0; i < producersCount; i++)
            {
                int producerId = i;
                producers[i] = Task.Run(async () =>
                {
                    for (int j = 0; j < itemsCount / producersCount; j++)
                    {
                        var item = new DataItem($"P{producerId}-Item{j}", _random.Next(100, 500));
                        queue.Enqueue(item);
                        Console.WriteLine($"üì§ [Async/Await] Producer {producerId}: {item.Name}");
                        await Task.Delay(50);
                    }
                });
            }

            // –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏
            var consumers = new Task[consumersCount];
            for (int i = 0; i < consumersCount; i++)
            {
                int consumerId = i;
                consumers[i] = Task.Run(async () =>
                {
                    while (!completed || !queue.IsEmpty)
                    {
                        if (queue.TryDequeue(out var item))
                        {
                            await ProcessDataItem(item, $"Consumer{consumerId}");
                            Interlocked.Increment(ref processedCount);
                        }
                        else
                        {
                            await Task.Delay(10); // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
                        }
                    }
                });
            }

            // –ñ–¥–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
            await Task.WhenAll(producers);
            completed = true;

            // –ñ–¥–µ–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
            await Task.WhenAll(consumers);

            stopwatch.Stop();
            Console.WriteLine($"‚úÖ [Async/Await] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processedCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ {stopwatch.ElapsedMilliseconds}ms\n");
        }

        // 3. TASK.WHENALL - –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        private async Task RunTaskWhenAllExample(int itemsCount, int producersCount, int consumersCount)
        {
            Console.WriteLine("--- 3. TASK.WHENALL –ø–æ–¥—Ö–æ–¥ ---");
            var stopwatch = Stopwatch.StartNew();

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—Ä–∞–Ω–µ–µ
            var allItems = new List<DataItem>();
            for (int i = 0; i < itemsCount; i++)
            {
                allItems.Add(new DataItem($"Item{i}", _random.Next(100, 500)));
            }

            Console.WriteLine($"üì¶ [Task.WhenAll] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {allItems.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤");

            // –†–∞–∑–¥–µ–ª—è–µ–º —Ä–∞–±–æ—Ç—É –º–µ–∂–¥—É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è–º–∏
            var chunkSize = itemsCount / consumersCount;
            var tasks = new List<Task>();

            for (int i = 0; i < consumersCount; i++)
            {
                int consumerId = i;
                int startIndex = i * chunkSize;
                int endIndex = (i == consumersCount - 1) ? allItems.Count : startIndex + chunkSize;

                var chunk = allItems.GetRange(startIndex, endIndex - startIndex);
                
                tasks.Add(Task.Run(async () =>
                {
                    foreach (var item in chunk)
                    {
                        await ProcessDataItem(item, $"Worker{consumerId}");
                    }
                    Console.WriteLine($"‚úÖ [Task.WhenAll] Worker{consumerId} –æ–±—Ä–∞–±–æ—Ç–∞–ª {chunk.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
                }));
            }

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await Task.WhenAll(tasks);

            stopwatch.Stop();
            Console.WriteLine($"‚úÖ [Task.WhenAll] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {allItems.Count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ {stopwatch.ElapsedMilliseconds}ms\n");
        }

        // 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        private async Task PerformanceComparison(int itemsCount)
        {
            Console.WriteLine("--- 4. –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ---");

            const int iterations = 3;
            var channelsTime = new List<long>();
            var asyncAwaitTime = new List<long>();
            var taskWhenAllTime = new List<long>();

            for (int i = 0; i < iterations; i++)
            {
                Console.WriteLine($"–ò—Ç–µ—Ä–∞—Ü–∏—è {i + 1}/{iterations}:");

                // Channels
                var sw = Stopwatch.StartNew();
                await QuickChannelsTest(itemsCount);
                sw.Stop();
                channelsTime.Add(sw.ElapsedMilliseconds);
                Console.WriteLine($"  Channels: {sw.ElapsedMilliseconds}ms");

                // Async/Await
                sw.Restart();
                await QuickAsyncAwaitTest(itemsCount);
                sw.Stop();
                asyncAwaitTime.Add(sw.ElapsedMilliseconds);
                Console.WriteLine($"  Async/Await: {sw.ElapsedMilliseconds}ms");

                // Task.WhenAll
                sw.Restart();
                await QuickTaskWhenAllTest(itemsCount);
                sw.Stop();
                taskWhenAllTime.Add(sw.ElapsedMilliseconds);
                Console.WriteLine($"  Task.WhenAll: {sw.ElapsedMilliseconds}ms");
                
                Console.WriteLine();
            }

            // –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            Console.WriteLine("üìä –°–†–ï–î–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:");
            Console.WriteLine($"  Channels: {channelsTime.Average():F1}ms");
            Console.WriteLine($"  Async/Await: {asyncAwaitTime.Average():F1}ms");
            Console.WriteLine($"  Task.WhenAll: {taskWhenAllTime.Average():F1}ms");

            Console.WriteLine("\nüèÜ –í–´–í–û–î–´:");
            Console.WriteLine("  ‚Ä¢ Channels: üéØ –õ—É—á—à–∏–π –¥–ª—è producer/consumer, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–º");
            Console.WriteLine("  ‚Ä¢ Async/Await: ‚öñÔ∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
            Console.WriteLine("  ‚Ä¢ Task.WhenAll: üöÄ –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö");
        }

        // –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        private async Task QuickChannelsTest(int count)
        {
            var channel = Channel.CreateUnbounded<int>();
            var writer = channel.Writer;
            var reader = channel.Reader;

            var producer = Task.Run(async () =>
            {
                for (int i = 0; i < count; i++)
                {
                    await writer.WriteAsync(i);
                }
                writer.Complete();
            });

            var consumer = Task.Run(async () =>
            {
                await foreach (var item in reader.ReadAllAsync())
                {
                    await Task.Delay(1); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è "–æ–±—Ä–∞–±–æ—Ç–∫–∞"
                }
            });

            await Task.WhenAll(producer, consumer);
        }

        private async Task QuickAsyncAwaitTest(int count)
        {
            var queue = new ConcurrentQueue<int>();
            var completed = false;

            var producer = Task.Run(async () =>
            {
                for (int i = 0; i < count; i++)
                {
                    queue.Enqueue(i);
                    await Task.Yield();
                }
                completed = true;
            });

            var consumer = Task.Run(async () =>
            {
                while (!completed || !queue.IsEmpty)
                {
                    if (queue.TryDequeue(out var item))
                    {
                        await Task.Delay(1);
                    }
                    await Task.Yield();
                }
            });

            await Task.WhenAll(producer, consumer);
        }

        private async Task QuickTaskWhenAllTest(int count)
        {
            var tasks = new List<Task>();
            for (int i = 0; i < count; i++)
            {
                tasks.Add(Task.Delay(1));
            }
            await Task.WhenAll(tasks);
        }

        // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        private async Task ProcessDataItem(DataItem item, string workerName)
        {
            Console.WriteLine($"üì• {workerName} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {item.Name}");
            await Task.Delay(item.ProcessingTimeMs);
            // Console.WriteLine($"‚úÖ {workerName} –∑–∞–≤–µ—Ä—à–∏–ª: {item.Name}");
        }

        public record DataItem(string Name, int ProcessingTimeMs);
    }
} 